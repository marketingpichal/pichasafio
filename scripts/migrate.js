#!/usr/bin/env node

/**
 * Script de migraci√≥n para Supabase
 * Permite ejecutar migraciones en desarrollo y producci√≥n
 */

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';
import readline from 'readline';

// Configuraci√≥n de entornos
const environments = {
  development: {
    url: process.env.VITE_SUPABASE_URL_DEV || 'https://ghghxoxvyvztddeorhed.supabase.co',
    serviceKey: process.env.SUPABASE_SERVICE_ROLE_KEY_DEV || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImdoZ2h4b3h2eXZ6dGRkZW9yaGVkIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTczNDM0MiwiZXhwIjoyMDcxMzEwMzQyfQ.vQJHOGD0mTCKRqP24rw4hNW12HjRL9PbLSXa-ui2Bnw'
  },
  production: {
    url: process.env.VITE_SUPABASE_URL_PROD || '',
    serviceKey: process.env.SUPABASE_SERVICE_ROLE_KEY_PROD || ''
  }
};

// Funci√≥n para crear cliente de Supabase
function createSupabaseClient(env) {
  const config = environments[env];
  if (!config.url || !config.serviceKey) {
    throw new Error(`Configuraci√≥n incompleta para el entorno ${env}`);
  }
  return createClient(config.url, config.serviceKey);
}

// Funci√≥n para leer archivos SQL
function readSQLFile(filePath) {
  if (!fs.existsSync(filePath)) {
    throw new Error(`Archivo no encontrado: ${filePath}`);
  }
  return fs.readFileSync(filePath, 'utf8');
}

// Funci√≥n para ejecutar migraci√≥n
async function runMigration(env, migrationFile) {
  try {
    console.log(`üöÄ Ejecutando migraci√≥n en ${env}...`);
    console.log(`üìÅ Archivo: ${migrationFile}`);
    
    const supabase = createSupabaseClient(env);
    const sql = readSQLFile(migrationFile);
    
    // Dividir el SQL en statements individuales
    const statements = sql
      .split(';')
      .map(s => s.trim())
      .filter(s => s.length > 0);
    
    console.log(`üìä Ejecutando ${statements.length} statement(s)...`);
    
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i];
      console.log(`‚ö° Ejecutando statement ${i + 1}/${statements.length}`);
      
      const { error } = await supabase.rpc('exec_sql', { sql_query: statement });
      
      if (error) {
        console.error(`‚ùå Error en statement ${i + 1}:`, error);
        throw error;
      }
    }
    
    console.log(`‚úÖ Migraci√≥n completada exitosamente en ${env}`);
    
  } catch (error) {
    console.error(`‚ùå Error ejecutando migraci√≥n en ${env}:`, error.message);
    process.exit(1);
  }
}

// Funci√≥n para confirmar acci√≥n
function askConfirmation(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
    });
  });
}

// Funci√≥n principal
async function main() {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    console.log('Uso: node migrate.js <entorno> <archivo-migracion>');
    console.log('Entornos disponibles: development, production');
    console.log('Ejemplo: node migrate.js development ./sql/001_create_tables.sql');
    process.exit(1);
  }
  
  const [env, migrationFile] = args;
  
  if (!environments[env]) {
    console.error(`‚ùå Entorno no v√°lido: ${env}`);
    console.log('Entornos disponibles:', Object.keys(environments).join(', '));
    process.exit(1);
  }
  
  const fullPath = path.resolve(migrationFile);
  
  if (!fs.existsSync(fullPath)) {
    console.error(`‚ùå Archivo no encontrado: ${fullPath}`);
    process.exit(1);
  }
  
  // Mostrar informaci√≥n de la migraci√≥n
  console.log('\nüìã Informaci√≥n de la migraci√≥n:');
  console.log(`üéØ Entorno: ${env}`);
  console.log(`üìÅ Archivo: ${fullPath}`);
  console.log(`üåê URL: ${environments[env].url}`);
  
  // Confirmar en producci√≥n
  if (env === 'production') {
    console.log('\n‚ö†Ô∏è  ADVERTENCIA: Est√°s a punto de ejecutar una migraci√≥n en PRODUCCI√ìN');
    const confirmed = await askConfirmation('¬øEst√°s seguro de que quieres continuar? (y/N): ');
    
    if (!confirmed) {
      console.log('‚ùå Migraci√≥n cancelada');
      process.exit(0);
    }
  }
  
  await runMigration(env, fullPath);
}

// Ejecutar script
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(console.error);
}

export { runMigration, createSupabaseClient };